debug: true
trace: false

# Each server can connect to clients on the internal port 4222 
# (mapped to external ports in our docker-compose)
port: 4222

# Persistent JetStream data store
jetstream: {
  # Each server persists messages within the docker container
  # at /data/nats-server (mounted as ./persistent-data/server-nâ€¦ 
  # in our docker-compose)
  store_dir: "/data/nats-server/"
}

# Cluster formation
cluster: {
  name: "JSC"
  listen: "0.0.0.0:4245"

  # Servers can connect to one another at 
  # the following routes
  routes: [
    "nats://n1:4245"
    "nats://n2:4245"
    "nats://n3:4245"
  ]

}

authorization: {
  default_permissions = {
    publish = ["SANDBOX.*",              
                "$JS.API.INFO",
                "$JS.API.CONSUMER.CREATE.*",
                "$JS.API.CONSUMER.CREATE.*.>",
                "$JS.API.CONSUMER.DURABLE.CREATE.*.>",
                "$JS.API.CONSUMER.DELETE.*.>",
                "$JS.API.CONSUMER.INFO.*.>",
                "$JS.API.CONSUMER.LIST.*",
                "$JS.API.CONSUMER.NAMES.*",
                "$JS.API.CONSUMER.MSG.NEXT.*.>",
                "$JS.API.CONSUMER.MSG.NEXT.*.NEW",
                "$JS.API.STREAM.MSG.GET.*",
                "$JS.API.STREAM.INFO.*",
                "$JS.API.STREAM.LIST",
                "$JS.API.STREAM.NAMES",
                "$JS.ACK.*",
                "$JS.ACK.*.>"]
    subscribe = [
              "PUBLIC.>", 
              "PRIVATE.>", 
              "_INBOX.>"]
  }
  ADMIN = {
    publish = ">"
    subscribe = ">"
  }
  CHEFS = {
    publish = [
                "$JS.API.INFO",
                "$JS.API.STREAM.CREATE.CHEFS",
                "$JS.API.STREAM.UPDATE.CHEFS",
                "$JS.API.STREAM.DELETE.CHEFS",
                "$JS.API.STREAM.INFO.CHEFS",
                "$JS.API.STREAM.PURGE.CHEFS",
                "$JS.API.STREAM.LIST",
                "$JS.API.STREAM.NAMES",
                "$JS.API.STREAM.MSG.DELETE.CHEFS",
                "$JS.API.STREAM.MSG.GET.CHEFS",
                "$JS.API.STREAM.SNAPSHOT.CHEFS",
                "$JS.API.STREAM.RESTORE.CHEFS",


                "$JS.API.CONSUMER.CREATE.CHEFS",
                "$JS.API.CONSUMER.CREATE.CHEFS.>",
                "$JS.API.CONSUMER.DURABLE.CREATE.CHEFS.>",
                "$JS.API.CONSUMER.DELETE.CHEFS.>",
                "$JS.API.CONSUMER.INFO.CHEFS.>",
                "$JS.API.CONSUMER.LIST.CHEFS",
                "$JS.API.CONSUMER.NAMES.CHEFS",
                "$JS.API.CONSUMER.MSG.NEXT.CHEFS.>",

                "$JS.API.CONSUMER.MSG.NEXT.CHEFS.NEW",
                "$JS.API.STREAM.MSG.GET.CHEFS",

                "$JS.ACK.CHEFS.>"

                "PUBLIC.forms.>", 
                "PRIVATE.forms.>"]
    subscribe = "_INBOX.>"
  }
  CHEFS_CONSUMER = {
    publish = ["SANDBOX.*",              
                "$JS.API.INFO",
                "$JS.API.CONSUMER.CREATE.CHEFS",
                "$JS.API.CONSUMER.CREATE.CHEFS.>",
                "$JS.API.CONSUMER.DURABLE.CREATE.CHEFS.>",
                "$JS.API.CONSUMER.DELETE.CHEFS.>",
                "$JS.API.CONSUMER.INFO.CHEFS.>",
                "$JS.API.CONSUMER.LIST.CHEFS",
                "$JS.API.CONSUMER.NAMES.CHEFS",
                "$JS.API.CONSUMER.MSG.NEXT.CHEFS.>",
                "$JS.API.CONSUMER.MSG.NEXT.CHEFS.NEW",
                "$JS.API.STREAM.MSG.GET.CHEFS",
                "$JS.API.STREAM.INFO.CHEFS",
                "$JS.API.STREAM.LIST",
                "$JS.API.STREAM.NAMES",
                "$JS.ACK.CHEFS",
                "$JS.ACK.CHEFS.>"]
    subscribe = [
              "PUBLIC.forms.>", 
              "PRIVATE.forms.>", 
              "_INBOX.>"]
  }
  users = [
    {user: admin, password: password, permissions: $ADMIN}
    {user: chefs, password: password, permissions: $CHEFS}
    {user: chefsConsumer, password: password, permissions: $CHEFS_CONSUMER}
  ]
}