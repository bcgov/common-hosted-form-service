---
openapi: 3.0.3
info:
  version: 1.0.0
  title: Common Hosted Form Service (CHEFS)
  description: >-
    The API for an application for teams to create, manage and publish web forms.
    These back-end operations can work for different form builder tools that define the form as a json schema.
    Form management features include role-based access for administrators, form versioning,
    submission review and export, as well as notifications, document generation and reporting.
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca
externalDocs:
  description: Project Readmes
  url: 'https://github.com/bcgov/common-hosted-form-service'
servers:
  - url: /api/v1
    description: This Server
security:
  - OpenID:
    - user
    - admin
paths:
  /forms:
    get:
      summary: 'List all forms in the system.'
      operationId: listForms
      tags:
        - Form
      security:
        - OpenID:
            - user
              admin
      parameters:
        - in: query
          name: active
          schema:
            type: boolean
          description: filter forms by active status
          example: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Form'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new form
      operationId: createForm
      tags:
        - Form
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormBasic'
      responses:
        '201':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormBasic'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}:
    get:
      summary: Get a form
      operationId: readForm
      tags:
        - Form
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form to fetch
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a form
      operationId: updateForm
      tags:
        - Form
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormBasic'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete (soft) a form
      operationId: deleteForm
      tags:
        - Form
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
      responses:
        '204':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormBasic'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/export:
    get:
      summary: Export submissions for a form
      operationId: export
      tags:
        - Submission
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
        - in: query
          name: format
          schema:
            type: string
          description: chosen format for the submission data exported
          example: csv
          required: true
        - in: query
          name: type
          schema:
            type: string
          description: the category of data exported
          example: submissions
          required: true
        - in: query
          name: minDate
          schema:
            type: string
          example: '2020-12-17T08:00:00Z'
          description: Start date of period included in the export
        - in: query
          name: maxDate
          schema:
            type: string
          example: '2020-12-17T08:00:00Z'
          description: End date of period included in the export
      responses:
        '200':
          description: 'Export file created for download'
          headers:
           content-type:
              description: Response header
              schema:
                type: object
              example: 'text/json; charset=utf-8'
          content:
            text/csv:
              schema:
                type: string
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormSubmissionExport'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/versions:
    get:
      summary: List versions for form
      operationId: listVersions
      tags:
        - Form
        - Version
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormVersion'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/versions/{formVersionId}:
    get:
      summary: Get a form version
      operationId: readVersion
      tags:
        - Form
        - Version
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form that version belongs to
        - in: path
          name: formVersionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form version to fetch
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormVersion'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/version:
    get:
      summary: Get the details of currently published form version
      operationId: readPublishedForm
      tags:
        - Form
        - Version
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/versions/{formVersionId}/publish:
    post:
      summary: Publish a version of a form
      operationId: publishVersion
      tags:
        - Form
        - Version
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
        - in: path
          name: formVersionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form version to submit to
        - in: query
          name: unpublish
          schema:
            type: boolean
          example: true
          required: false
          description: Should this version of the form be unpublished
      responses:
        '201':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormVersionBasic'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/drafts:
    get:
      summary: List Drafts for form
      operationId: listDrafts
      tags:
        - Form
        - Draft
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormDraft'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a draft from a form version
      operationId: createDraft
      tags:
        - Form
        - Draft
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formVersionId:
                  type: string
                  description: ID of the Form Version used for this draft
                  example: bea3b705-1de5-4f4e-a4e6-0716b7674132
                schema:
                  type: object
                  description: this is the json for the form design.
      responses:
        '201':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDraft'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/drafts/{formVersionDraftId}:
    get:
      summary: Get a form draft
      operationId: readDraft
      tags:
        - Form
        - Draft
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
        - in: path
          name: formVersionDraftId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form version
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDraft'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a form draft
      operationId: updateDraft
      tags:
        - Form
        - Draft
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
        - in: path
          name: formVersionDraftId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  type: object
                  description: this is the json for the form design.
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDraft'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a form draft
      operationId: deleteDraft
      tags:
        - Form
        - Draft
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
        - in: path
          name: formVersionDraftId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form version
      responses:
        '204':
          description: 'OK'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/drafts/{formVersionDraftId}/publish:
    post:
      summary: Publish a draft of a form
      operationId: publishDraft
      tags:
        - Form
        - Draft
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
        - in: path
          name: formVersionDraftId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form version
      responses:
        '201':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormVersionBasic'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/submissions:
    get:
      summary: List submissions for a form
      operationId: listFormSubmissions
      tags:
        - Submission
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormSubmissionSummary'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{formId}/versions/{formVersionId}/submissions:
    post:
      summary: Create a new form submission
      operationId: createSubmission
      tags:
        - Submission
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
        - in: path
          name: formVersionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form version to submit to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormSubmissionBasic'
      responses:
        '201':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormSubmission'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List submissions from a form version
      operationId: listSubmissions
      tags:
        - Submission
      parameters:
        - in: path
          name: formId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form
        - in: path
          name: formVersionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the form version for submissions
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormSubmission'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /submissions/{formSubmissionId}:
    get:
      summary: Get a submission, the form and version
      operationId: readSubmission
      tags:
        - Submission
      parameters:
        - in: path
          name: formSubmissionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the Submission
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionFormVersion'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a form submission
      operationId: updateSubmission
      tags:
        - Submission
      parameters:
        - in: path
          name: formSubmissionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of a form submission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormSubmissionBasic'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormSubmission'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /submissions/{formSubmissionId}/email:
    post:
      summary: Email a message with link to a Submission
      operationId: emailSubmission
      tags:
        - Submission
      parameters:
        - in: path
          name: formSubmissionId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the Submission
        - in: header
          name: Referer
          description: URL of webpage where email was requested
          schema:
            type: string
          example: 'https://survey.gov.bc.com/app/form/success?s=7d66664b-87c5-4df8-ba7c-a6fb7d62c379'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                  example: 'jsmith@email.com'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /permissions:
    get:
      summary: 'List permissions in the system'
      operationId: listPermissions
      tags:
        - Permission
      security:
        - OpenID:
            - user
              admin
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new permission
      operationId: createPermission
      tags:
        - Permission
      security:
        - OpenID:
            - user
              admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Permission'
      responses:
        '201':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /permissions/{code}:
    get:
      summary: Get a Permission
      operationId: readPermission
      tags:
        - Permission
      security:
        - OpenID:
            - user
              admin
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: code of the permission to fetch
          example: submission_read
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a permission
      operationId: updatePermission
      tags:
        - Permission
      security:
        - OpenID:
            - user
              admin
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: code of the permission to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles:
    get:
      summary: 'List roles in the system'
      operationId: listRoles
      tags:
        - Role
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new role
      operationId: createRole
      tags:
        - Role
      security:
        - OpenID:
            - user
              admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles/{code}:
    get:
      summary: Get a Role
      operationId: getRole
      tags:
        - Role
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: code of the role to fetch
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a role
      operationId: updateRole
      tags:
        - Role
      security:
        - OpenID:
            - user
              admin
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: code of the role to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rbac/current:
    get:
      summary: Get forms/roles/permissions for the logged in user
      operationId: getCurrentUser
      tags:
        - Form
        - Role
        - Permission
        - User
      parameters:
        - in: query
          name: formId
          schema:
            type: string
          description: form ID
        - in: query
          name: active
          schema:
            type: boolean
          description: is the form active flag
        - in: query
          name: idps
          schema:
            type: string
        - in: query
          name: accessLevels
          schema:
            type: string
          description: filter on the user access level for the form (public, idp, team)
        # and more...
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CurrentUser'
                  - type: array
                    items:
                      $ref: '#/components/schemas/UserForm'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rbac/idps:
    get:
      summary: Get the list of identity providers
      operationId: getIdentityProviders
      tags:
        - Identity Provider
      parameters:
        - in: query
          name: active
          schema:
            type: boolean
          description: is the identity provider active
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityProvider'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rbac/forms:
    get:
      summary: Get users with roles for a form
      operationId: getFormUsers
      tags:
        - Form
        - User
        - Role
        - Permission
      parameters:
        - in: query
          name: formId
          schema:
            type: string
          description: form id
          required: true
        - in: query
          name: userId
          schema:
            type: string
          description: user id
        - in: query
          name: keycloakId
          schema:
            type: string
          description: user keycloakId
        - in: query
          name: username
          schema:
            type: string
          description: user username
        - in: query
          name: fullName
          schema:
            type: string
          description: user fullName
        - in: query
          name: firstName
          schema:
            type: string
          description: user firstName
        - in: query
          name: lastName
          schema:
            type: string
          description: user lastName
        - in: query
          name: email
          schema:
            type: string
          description: user email
        - in: query
          name: formName
          schema:
            type: string
          description: form name
        - in: query
          name: active
          schema:
            type: boolean
          description: is the form active flag
        - in: query
          name: idps
          schema:
            type: string
          description: identity provider (idp field) associated with form
        - in: query
          name: roles
          schema:
            type: string
          description: roles (code field) user has on form
        - in: query
          name: permissions
          schema:
            type: string
          description: permissions (code field) user has on form
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAccess'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rbac/users:
    get:
      summary: Get the list of users and associated forms
      operationId: getUserForms
      tags:
        - Form
        - User
        - Role
        - Permission
      security:
        - OpenID:
            - user
              admin
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          description: user id
        - in: query
          name: keycloakId
          schema:
            type: string
          description: user keycloakId
        - in: query
          name: username
          schema:
            type: string
          description: user username
        - in: query
          name: fullName
          schema:
            type: string
          description: user fullName
        - in: query
          name: fullname
          schema:
            type: string
          description: user username
        - in: query
          name: firstName
          schema:
            type: string
          description: user firstName
        - in: query
          name: lastName
          schema:
            type: string
          description: user lastName
        - in: query
          name: email
          schema:
            type: string
          description: user email
        - in: query
          name: formId
          schema:
            type: string
          description: form id
          required: true
        - in: query
          name: formName
          schema:
            type: string
          description: form name
        - in: query
          name: active
          schema:
            type: boolean
          description: is the form active flag
        - in: query
          name: idps
          schema:
            type: string
          description: identity provider (idp field) associated with form
        - in: query
          name: roles
          schema:
            type: string
          description: roles (code field) user has on form
        - in: query
          name: permissions
          schema:
            type: string
          description: permissions (code field) user has on form
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAccess'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Set relationships between users, forms, roles
      operationId: setUserForms
      tags:
        - Form
        - User
        - Role
        - Permission
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          description: user id
          required: true
        - in: query
          name: formId
          schema:
            type: string
          description: form id
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FormRoleUser'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAccess'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: get a list of users and their role
      operationId: listUsers
      tags:
        - User
      parameters:
        - in: query
          name: keycloakId
          schema:
            type: string
          description: user keycloakId
        - in: query
          name: username
          schema:
            type: string
          description: user username
        - in: query
          name: fullName
          schema:
            type: string
          description: user fullName
        - in: query
          name: firstName
          schema:
            type: string
          description: user firstName
        - in: query
          name: lastName
          schema:
            type: string
          description: user lastName
        - in: query
          name: email
          schema:
            type: string
          description: user email
        - in: query
          name: search
          schema:
            type: string
          description: string to match against  username, fullName and Email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      summary: A User and their role
      operationId: readUser
      tags:
        - User
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            example: bea3b705-1de5-4f4e-a4e6-0716b7674132
          description: user ID
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      openIdConnectUrl: 'https://example.com/.well-known/openid-configuration'
  schemas:
    EmailMessage:
      allOf:
        - type: object
          properties:
            msgid:
              type: string
              format: uuid
              description: ID of message .
              example: 1223h78b-21d2-4128-b4e8-02ad3daipoi32
            to:
              type: array
              items:
                type: string
                example: 'jsmith@email.com'
              description: an array of the message recipients
            txId:
              type: string
              format: uuid
              description: Transaction ID returned by a messaging service
              example: 7d13b78b-21d2-4128-b4e8-02ad3da17d22
    TimeStampUserData:
      type: object
      properties:
        createdBy:
          type: string
          example: migration-011
        createdAt:
          type: string
          example: 2020-06-04T18:49:20.672Z
        updatedBy:
          type: string
          example: jsmith
        updatedAt:
          type: string
          example: 2020-06-04T18:49:20.672Z
    # basic form, used in create new form POST
    FormBasic:
      allOf:
        - type: object
          properties:
            name:
              type: string
              example: My First Form
            description:
              type: string
              example: I built this survey form. It is amazing.
            identityProviders:
              type: array
              items:
                $ref: '#/components/schemas/IdentityProvider'
            showSubmissionConfirmation:
              type: boolean
              example: true
            submissionReceivedEmails:
              type: array
              items:
                type: string
              example:
                - 'me@email.com'
                - 'manager@email.com'
    # additional Form fields, used in GET
    Form:
      allOf:
        - $ref: '#/components/schemas/FormBasic'
        - type: object
          properties:
            id:
              type: string
              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
            active:
              type: boolean
            labels:
              type: array
              example:
                - Survey
              items:
                type: string
            versions:
              type: array
              items:
                $ref: '#/components/schemas/FormVersionBasic'
            snake:
              type: string
              example: my-survey-form
        - $ref: '#/components/schemas/TimeStampUserData'
    FormRoleUser:
      type: object
      properties:
        formId:
          type: string
          description: ID of form
          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
        role:
          type: string
          description: code of role
          example: team_manager
        userId:
          type: string
          description: ID of user
          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
    # a basic form submission, used in POST
    FormSubmissionBasic:
      allOf:
        - type: object
          properties:
            draft:
              type: boolean
              description: Used to indicate if submission came from a draft version of a form.
              example: false
            submission:
              type: object
              description: this is the json for the form submission.
        - $ref: '#/components/schemas/TimeStampUserData'
    # the full form submission, used in GET
    FormSubmission:
      allOf:
        - $ref: '#/components/schemas/FormSubmissionBasic'
        - type: object
          properties:
            id:
              type: string
              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
            formVersionId:
              type: string
              description: ID of the FormVersion this submission is for.
              example: bea3b705-1de5-4f4e-a4e6-0716b7674132
            confirmationId:
              type: string
              description: shortend version of the id, useful for visual representation
              example: AEB3B705
            deleted:
              type: boolean
              description: Used to indicate a soft delete.
              example: false
    # the full form submission, used in GET
    FormSubmissionExport:
      allOf:
        - type: object
          properties:
            confirmationId:
              type: string
              description: shortend version of the id, useful for visual representation
              example: AEB3B705
            formName:
              type: string
              description: The title of the form
              example: My Survey Form
            username:
              type: string
              description: Username of this user
              example: jsmith
            fullName:
              type: string
              example: Jane Smith
            email:
              type: string
              example: jsmith@gov.bc.ca
            version:
              type: integer
              description: The version number of the form for a submission
              example: 1
            submission:
              type: object
              description: this is the json for the form submission.
            createdAt:
              type: string
              example: 2020-06-04T18:49:20.672Z
    # the full form submission, used in GET
    FormSubmissionSummary:
      allOf:
        - type: object
          properties:
            submissionId:
              type: string
              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
            formId:
              type: string
              description: ID of the form this submission is for.
              example: bea3b705-1de5-4f4e-a4e6-0716b7674132
            formName:
              type: string
              description: The title of the form
              example: My Survey Form
            formVersionId:
              type: string
              description: ID of the FormVersion this submission is for.
              example: bea3b705-1de5-4f4e-a4e6-0716b7674132
            confirmationId:
              type: string
              description: shortend version of the id, useful for visual representation
              example: AEB3B705
            deleted:
              type: boolean
              description: Used to indicate a soft delete.
              example: false
            draft:
              type: boolean
              description: Used to indicate if submission came from a draft version of a form.
              example: false
            version:
              type: integer
              description: The version number of the form for a submission
              example: 1
        - $ref: '#/components/schemas/TimeStampUserData'
    SubmissionFormVersion:
      allOf:
        - $ref: '#/components/schemas/Form'
        - $ref: '#/components/schemas/FormSubmission'
        - $ref: '#/components/schemas/FormVersion'
    FormVersionBasic:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
            formId:
              type: string
              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
            version:
              type: integer
              example: 1
            published:
              type: boolean
              example: true
        - $ref: '#/components/schemas/TimeStampUserData'
    FormVersion:
      allOf:
        - $ref: '#/components/schemas/FormVersionBasic'
        - type: object
          properties:
            schema:
              type: object
              description: this is the json for the form design.
    FormDraft:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
            formId:
              type: string
              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034
            formVersionId:
              type: string
              description: ID of the FormVersion this submission is for.
              example: bea3b705-1de5-4f4e-a4e6-0716b7674132
            schema:
              type: object
              description: this is the json for the form design.
        - $ref: '#/components/schemas/TimeStampUserData'
    IdentityProvider:
      allOf:
        - type: object
          properties:
            code:
              type: string
              example: idir
            display:
              type: string
              example: IDIR
            idp:
              type: string
              description: The identity_provider a user logs in with.  Allows us to determine what source authenticated the user.
              example: idir
            active:
              type: boolean
              example: true
        - $ref: '#/components/schemas/TimeStampUserData'
    # permission object
    PermissionBasic:
      allOf:
        - type: object
          properties:
            code:
              type: string
              example: design_update
            display:
              type: string
              description: The permission name
              example: 'Design Update'
            description:
              type: string
              example: >-
                'Can edit/update the form design'
            active:
              type: boolean
              example: true
        - $ref: '#/components/schemas/TimeStampUserData'
    Permission:
      allOf:
        - $ref: '#/components/schemas/PermissionBasic'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/RoleBasic'
    RoleBasic:
      allOf:
        - type: object
          properties:
            code:
              type: string
              example: form_designer
            display:
              type: string
              description: The role name
              example: 'Form Designer'
            description:
              type: string
              example: >-
                'Designs the form'
            active:
              type: boolean
              example: true
        - $ref: '#/components/schemas/TimeStampUserData'
    Role:
      allOf:
        - $ref: '#/components/schemas/RoleBasic'
        - type: object
          properties:
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/PermissionBasic'
    User:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: ID of the user
              example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
            keycloakID:
              type: string
              description: ID of the user in the external Keycloak system
              example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
            username:
              type: string
              description: Username of this user
              example: jsmith
            firstName:
              type: string
              example: Jane
            fullName:
              type: string
              example: Jane Smith
            lastName:
              type: string
              example: Smith
            email:
              type: string
              example: jsmith@gov.bc.ca
        - $ref: '#/components/schemas/TimeStampUserData'
    UserAccess:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        keycloakId:
          type: string
          description: ID of the user
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        username:
          type: string
          description: Username of this user
          example: jsmith
        firstName:
          type: string
          example: Jane
        fullName:
          type: string
          example: Jane Smith
        lastName:
          type: string
          example: Smith
        email:
          type: string
          example: jsmith@gov.bc.ca
        formId:
          type: string
          description: ID of the form
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        formName:
          type: string
          example: jsmith@gov.bc.ca
        labels:
          type: array
          example:
            - Survey
          items:
            type: string
        active:
          type: boolean
          example: true
        identityProviders:
          type: array
          description: the Identity Provider code associated with this form
          example:
            - bceid
            - idir
          items:
            type: string
        idps:
          type: array
          description: the Identity Provider idps associated with this form
          example:
            - bceid
            - idir
          items:
            type: string
        formVersionId:
          type: string
          description: ID of the current form version
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        version:
          type: integer
          description: Number of the current form version
          example: 1
        published:
          type: boolean
          example: true
        versionUpdatedAt:
          type: string
          description: when latest form version was last updated
          example: 2020-06-04T18:49:20.672Z
        roles:
          type: array
          description: the role codes this user has on this form
          example:
            - owner
            - team_manager
          items:
            type: string
        permissions:
          type: array
          description: the permission codes this user has on this form
          example:
            - design_update
            - submission_create
          items:
            type: string
    CurrentUser:
      type: object
      properties:
        id:
          type: string
          description: ID of the user
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        keycloakId:
          type: string
          description: ID of the user
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        username:
          type: string
          description: Username of this user
          example: jsmith
        firstName:
          type: string
          example: Jane
        fullName:
          type: string
          example: Jane Smith
        lastName:
          type: string
          example: Smith
        email:
          type: string
          example: jsmith@gov.bc.ca
        public:
          type: boolean
          example: false
    UserForm:
      type: object
      properties:
        formId:
          type: string
          description: ID of the form
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        formName:
          type: string
          example: jsmith@gov.bc.ca
        labels:
          type: array
          example:
            - Form
          items:
            type: string
        idps:
          type: array
          description: the Identity Provider code associated with this form
          example:
            - bceid
            - idir
          items:
            type: string
        active:
          type: boolean
          example: true
        formVersionId:
          type: string
          description: ID of the current form version
          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
        version:
          type: integer
          description: Number of the current form version
          example: 1
        roles:
          type: array
          description: the role codes this user has on this form
          example:
            - owner
            - team_manager
          items:
            type: string
        permissions:
          type: array
          description: the permission codes this user has on this form
          example:
            - design_update
            - submission_create
          items:
            type: string
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: 'https://httpstatuses.com/400'
    Conflict:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 409
            title:
              example: Conflict
            type:
              example: 'https://httpstatuses.com/409'
    Error:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: 'https://httpstatuses.com/500'
    NotFound:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: 'https://httpstatuses.com/404'
    Problem:
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          description: 'What type of problem, link to explanation of problem'
        title:
          type: string
          description: 'Title of problem, generally the Http Status Code description'
        status:
          type: string
          description: The Http Status code
        detail:
          type: string
          description: short description of why this problem was raised.
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  value:
                    type: object
                    description: Contents of the field that was in error.
                    example: utf-8x
                  message:
                    type: string
                    description: The error message for the field.
                    example: Invalid value `encoding`.
            status:
              example: 422
            title:
              example: Unprocessable Entity
            type:
              example: 'https://httpstatuses.com/422'
  responses:
    Accepted:
      description: Accepted
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    Conflict:
      description: Request conflicts with server state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Conflict'
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Lack required role to perform action
    NoContent:
      description: Accepted and no content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    UnauthorizedError:
      description: Access token is missing or invalid
    UnprocessableEntity:
      description: >-
        The server was unable to process the contained instructions. Generally
        validation error(s).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
