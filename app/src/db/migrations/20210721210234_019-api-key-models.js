const { v4: uuidv4 } = require('uuid');
const stamps = require('../stamps');

const CREATED_BY = 'migration-019';

exports.up = function (knex) {
  return Promise.resolve()
    // Add the new permissions for users managing Form API Keys
    .then(() => {
      const items = [
        {
          createdBy: CREATED_BY,
          code: 'form_api_create',
          display: 'API Key Create',
          description: 'Can create an api key for a form',
          active: true
        },
        {
          createdBy: CREATED_BY,
          code: 'form_api_read',
          display: 'API Key Read',
          description: 'Can view the API key for a form (unencrypted)',
          active: true
        },
        {
          createdBy: CREATED_BY,
          code: 'form_api_update',
          display: 'API Key Update',
          description: 'Can update the API key for a form',
          active: true
        },
        {
          createdBy: CREATED_BY,
          code: 'form_api_delete',
          display: 'API Key Delete',
          description: 'Can remove the API key from a form',
          active: true
        }
      ];
      return knex('permission').insert(items).returning('code');
    })

    // Form Owners (and only owners now) can do these new permissions
    .then(() => {
      const rolePermssion = {
        id: uuidv4(),
        createdBy: CREATED_BY,
        role: 'owner',
        permission: 'form_api_create'
      };
      return knex('role_permission').insert(rolePermssion);
    })

    .then(() => {
      const rolePermssion = {
        id: uuidv4(),
        createdBy: CREATED_BY,
        role: 'owner',
        permission: 'form_api_read'
      };
      return knex('role_permission').insert(rolePermssion);
    })

    .then(() => {
      const rolePermssion = {
        id: uuidv4(),
        createdBy: CREATED_BY,
        role: 'owner',
        permission: 'form_api_update'
      };
      return knex('role_permission').insert(rolePermssion);
    })

    .then(() => {
      const rolePermssion = {
        id: uuidv4(),
        createdBy: CREATED_BY,
        role: 'owner',
        permission: 'form_api_delete'
      };
      return knex('role_permission').insert(rolePermssion);
    })

    // Add the new table for API keys
    .then(() => knex.schema.createTable('form_api_key', table => {
      table.specificType(
        'id',
        'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY'
      );
      table.uuid('formId').references('id').inTable('form').notNullable().index();
      table.uuid('secret').unique().notNullable();
      stamps(knex, table);
    }))

    // Add the new table for API key audit history
    .then(() => knex.schema.createTable('form_api_key_audit', table => {
      table.specificType(
        'id',
        'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY'
      );
      table.integer('keyId').notNullable();
      table.uuid('formId').notNullable().index();
      table.string('dbUser').notNullable();
      table.string('updatedByUsername');
      table.timestamp('actionTimestamp', { useTz: true }).defaultTo(knex.fn.now());
      table.string('action').notNullable();
    }))

    .then(() => knex.schema.raw(`CREATE OR REPLACE FUNCTION public.form_api_key_audited_func() RETURNS trigger AS $body$
    BEGIN
        if (TG_OP = 'UPDATE') then
            insert into public.form_api_key_audit ("keyId", "formId", "dbUser", "updatedByUsername", "actionTimestamp", "action")
            values (
            OLD.id,
            OLD."formId",
            SESSION_USER,
            NEW."updatedBy",
            now(),
            TG_OP);
            RETURN NEW;
        elsif (TG_OP = 'INSERT') then
            insert into public.form_api_key_audit ("keyId", "formId", "dbUser", "updatedByUsername", "actionTimestamp", "action")
            values (
            NEW.id,
            NEW."formId",
            SESSION_USER,
            NEW."createdBy",
            now(),
            TG_OP);
            RETURN NEW;
        elsif (TG_OP = 'DELETE') then
            insert into public.form_api_key_audit ("keyId", "formId", "dbUser", "actionTimestamp", "action")
            values (
            OLD.id,
            OLD."formId",
            SESSION_USER,
            now(),
            TG_OP);
            RETURN NEW;
        end if;
    END;
    $body$ LANGUAGE plpgsql`))

    .then(() => knex.schema.raw(`CREATE TRIGGER form_api_key_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE ON form_api_key
    FOR EACH ROW EXECUTE PROCEDURE public.form_api_key_audited_func();`));
};

exports.down = function (knex) {
  return Promise.resolve()
    // drop new tables/function
    .then(() => knex.schema.raw('DROP TRIGGER form_api_key_audit_trigger ON form_api_key'))
    .then(() => knex.schema.raw('DROP FUNCTION form_api_key_audited_func()'))
    .then(() => knex.schema.dropTableIfExists('form_api_key_audit'))
    .then(() => knex.schema.dropTableIfExists('form_api_key'))

    // undo new form role permission
    .then(() => knex('role_permission')
      .where({
        createdBy: CREATED_BY
      })
      .del())

    // undo new permissions
    .then(() => knex('permission')
      .where({
        createdBy: CREATED_BY
      })
      .del());
};
