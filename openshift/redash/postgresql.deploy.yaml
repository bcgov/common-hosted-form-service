---
kind: Template
apiVersion: template.openshift.io/v1
labels:
  app.kubernetes.io/component: database
  app.kubernetes.io/instance: ${NAME}-postgresql
  app.kubernetes.io/managed-by: kubectl
  app.kubernetes.io/name: postgresql
  app.kubernetes.io/part-of: redash
metadata:
  name: ${NAME}
objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}-postgresql
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app.kubernetes.io/instance: ${NAME}-postgresql
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        type: Recreate
      template:
        metadata:
          labels:
            app.kubernetes.io/component: database
            app.kubernetes.io/instance: ${NAME}-postgresql
            app.kubernetes.io/managed-by: kubectl
            app.kubernetes.io/name: postgresql
            app.kubernetes.io/part-of: redash
        spec:
          containers:
            - env:
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRES_DATABASE
                      name: ${NAME}-postgresql
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRES_PASSWORD
                      name: ${NAME}-postgresql
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRES_USER
                      name: ${NAME}-postgresql
              image: ${IMAGE_REGISTRY}/openshift/postgresql:9.6
              imagePullPolicy: Always
              livenessProbe:
                tcpSocket:
                  port: 5432
                initialDelaySeconds: 30
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              name: ${NAME}-postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/bash
                    - "-c"
                    - pg_isready -h localhost -p 5432
                failureThreshold: 3
                initialDelaySeconds: 20
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 15
              resources:
                limits:
                  memory: ${POSTGRESQL_MEMORY_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - name: ${NAME}-postgresql-volume
                  mountPath: /var/lib/pgsql/data
          volumes:
            - name: ${NAME}-postgresql-volume
              persistentVolumeClaim:
                claimName: ${NAME}-postgresql
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
      triggers:
        - type: ConfigChange
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-${NAME}-to-postgresql
    spec:
      podSelector:
        matchLabels:
          app.kubernetes.io/instance: ${NAME}-postgresql
      ingress:
        - ports:
            - protocol: TCP
              port: 5432
          from:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/instance: chefs
      policyTypes:
        - Ingress
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-backup-${NAME}-postgres-to-${NAME}-postgresql
    spec:
      podSelector:
        matchLabels:
          app.kubernetes.io/instance: ${NAME}-postgresql
      ingress:
        - ports:
            - protocol: TCP
              port: 5432
          from:
            - podSelector:
                matchLabels:
                  cronjob: backup-${NAME}-postgres
      policyTypes:
        - Ingress
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-postgresql
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${POSTGRESQL_VOLUME_CAPACITY}
      storageClassName: netapp-file-standard
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: backup-${NAME}-postgresql
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1Gi
      storageClassName: netapp-file-backup
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}-postgresql
    spec:
      ports:
        - name: 5432-tcp
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        app.kubernetes.io/instance: ${NAME}-postgresql
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}
parameters:
  - name: NAME
    displayName: Name
    description: The name assigned to all of the objects defined in this template.
    required: true
    value: chefs-redash
  - name: POSTGRESQL_MEMORY_LIMIT
    displayName: PostgreSQL Memory Limit
    description: The memory limit for PostgreSQL
    required: true
    value: 512Mi
  - name: POSTGRESQL_VOLUME_CAPACITY
    displayName: PostgreSQL Volume Capacity
    description: The volume capacity for PostgreSQL
    required: true
    value: 4Gi
  - name: IMAGE_REGISTRY
    description: The base docker registry
    displayName: Docker Image Registry
    required: true
    value: image-registry.openshift-image-registry.svc:5000
